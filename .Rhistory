scale_fill_continuous(type = "viridis") +
theme_void()+
theme(legend.position = "none")
ggplot(data, aes( y=y, x = x) ) +
geom_hex(bins = 100) +
scale_fill_viridis_c(option = "viridis", limits = c(0, NA)) +
theme_void()+
theme(legend.position = "none")
ggplot(data, aes( y=y, x = x) ) +
geom_hex(bins = 100) +
scale_fill_viridis_c(option = "viridis", limits = c(-1, NA)) +
theme_void()+
theme(legend.position = "none")
# Customizar o stat_bin_hex para substituir NA por zero
stat_bin_hex_zero <- function(mapping = NULL, data = NULL, geom = "hex", position = "identity", ...) {
ggplot2::layer(
stat = ggplot2::StatBinHex,
data = data,
mapping = mapping,
geom = geom,
position = position,
params = list(...),
check_aes = FALSE,
inherit.aes = TRUE
)
}
# Plotar o gráfico
ggplot(data, aes(y = y, x = x)) +
stat_bin_hex_zero(bins = 100) +
scale_fill_viridis_c(option = "viridis", na.value = 0, limits = c(0, NA)) +
theme_void() +
theme(legend.position = "none")
# Customizar o stat_bin_hex para substituir NA por zero
stat_bin_hex_zero <- function(mapping = NULL, data = NULL, geom = "hex", position = "identity", ...) {
ggplot2::layer(
stat = ggplot2::StatBinHex,
data = data,
mapping = mapping,
geom = geom,
position = position,
params = list(...),
check_aes = FALSE,
inherit.aes = TRUE
)
}
# Plotar o gráfico
ggplot(data, aes(y = y, x = x)) +
stat_bin_hex_zero(bins = 100) +
scale_fill_viridis_c(option = "viridis", na.value = 0, limits = c(0, NA)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes( y=y, x = x) ) +
geom_hex(bins = 100) +
scale_fill_viridis_c(option = "viridis",na.value = 0, limits = c(-1, NA)) +
theme_void()+
theme(legend.position = "none")
ggplot(data, aes(y = y, x = x)) +
geom_hex(bins = 100) +
scale_fill_viridis_c(option = "viridis", na.value = 0, limits = c(-1, NA)) +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = "lightgrey", color = NA)
)
ggplot(data, aes(y = y, x = x)) +
geom_hex(bins = 100) +
scale_fill_continuous(type = "viridis") +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = "lightgrey", color = NA)
)
ggplot(data, aes(y = y, x = x)) +
geom_hex(bins = 100) +
scale_fill_continuous(type = "viridis") +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = "virids", color = NA)
)
ggplot(data, aes(y = y, x = x)) +
geom_hex(bins = 100) +
scale_fill_continuous(type = "viridis") +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = "viridis", color = NA)
)
ggplot(data, aes(y = y, x = x)) +
geom_hex(bins = 100) +
scale_fill_continuous(type = "viridis") +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = "black", color = NA)
)
ggplot(data, aes(y = y, x = x)) +
geom_hex(bins = 50) +
scale_fill_continuous(type = "viridis") +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = "black", color = NA)
)
ggplot(data, aes(y = y, x = x)) +
geom_hex() +
scale_fill_continuous(type = "viridis") +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = "black", color = NA)
)
ggplot(data, aes(y = y, x = x)) +
geom_hex() +
scale_fill_viridis_c(option = "viridis", na.value = viridis::viridis(1)) +  theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = "black", color = NA)
)
ggplot(data, aes(y = y, x = x)) +
geom_hex() +
scale_fill_viridis_c(option = "viridis", na.value = viridis::viridis(1)) +  theme_void() +
theme(
legend.position = "none"
)
viridis::viridis(1)
ggplot(data, aes(y = y, x = x)) +
geom_hex() +
scale_fill_continuous(type = "viridis") +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = viridis::viridis(1), color = NA)
)
ggplot(data, aes(y = y, x = x)) +
geom_hex() +
scale_fill_continuous(type = "viridis") +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = viridis::viridis(0), color = NA)
)
1
ggplot(data, aes(y = y, x = x)) +
geom_hex() +
scale_fill_continuous(type = "viridis") +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = viridis::viridis(1), color = NA)
)
ggplot(data, aes(y = y, x = x)) +
geom_hex(bins = 50) +
scale_fill_continuous(type = "viridis") +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = viridis::viridis(1), color = NA)
)
ggplot(data, aes(y = y, x = x)) +
geom_hex() +
scale_fill_continuous(type = "viridis") +
theme_void() +
theme(
legend.position = "none",
plot.background = element_rect(fill = viridis::viridis(1), color = NA)
)
# Carregar bibliotecas
library(ggplot2)
# Gerar dados aleatórios
set.seed(123)
data <- data.frame(
x = rnorm(100),
y = rnorm(100),
color = factor(sample(1:3, 100, replace = TRUE))
)
# Criar gráfico de dispersão colorido
ggplot(data, aes(x = x, y = y, color = color)) +
geom_point(size = 3) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none"
) +
scale_color_manual(values = c("#FF6347", "#4682B4", "#32CD32"))
# Carregar bibliotecas
library(ggplot2)
# Gerar dados aleatórios
set.seed(123)
data <- data.frame(
category = factor(1:10),
value = runif(10, min = 5, max = 20)
)
# Criar gráfico de barras com cores gradient
ggplot(data, aes(x = category, y = value, fill = value)) +
geom_bar(stat = "identity") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none"
) +
scale_fill_gradient(low = "#87CEFA", high = "#FF4500")
# Carregar bibliotecas
library(ggplot2)
# Gerar dados aleatórios
set.seed(123)
data <- data.frame(
x = rnorm(100)
)
# Criar gráfico de densidade
ggplot(data, aes(x = x)) +
geom_density(fill = "#4682B4", alpha = 0.7) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "white"),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank()
)
# Carregar bibliotecas
library(ggplot2)
# Gerar dados aleatórios
set.seed(123)
data <- data.frame(
x = rnorm(100),
y = rnorm(100),
color = factor(sample(1:3, 100, replace = TRUE))
)
# Criar gráfico de dispersão colorido com tema escuro
ggplot(data, aes(x = x, y = y, color = color)) +
geom_point(size = 3) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
panel.grid.major = element_line(color = "gray30"),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none"
) +
scale_color_manual(values = c("#FF6347", "#4682B4", "#32CD32"))
# Carregar bibliotecas
library(ggplot2)
# Gerar dados aleatórios
set.seed(123)
data <- data.frame(
category = factor(1:10),
value = runif(10, min = 5, max = 20)
)
# Criar gráfico de barras com cores gradient e tema escuro
ggplot(data, aes(x = category, y = value, fill = value)) +
geom_bar(stat = "identity") +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
panel.grid.major = element_line(color = "gray30"),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none"
) +
scale_fill_gradient(low = "#87CEFA", high = "#FF4500")
# Carregar bibliotecas
library(ggplot2)
# Gerar dados aleatórios
set.seed(123)
data <- data.frame(
x = rep(1:10, times = 3),
y = cumsum(runif(30, min = -1, max = 1)),
group = rep(1:3, each = 10)
)
# Criar gráfico de linhas com vários grupos e tema escuro
ggplot(data, aes(x = x, y = y, group = group, color = factor(group))) +
geom_line(size = 1.2) +
theme_minimal() +
theme(
panel.background = element_rect(fill = "black"),
plot.background = element_rect(fill = "black"),
panel.grid.major = element_line(color = "gray30"),
panel.grid.minor = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
legend.position = "none"
) +
scale_color_manual(values = c("#FF6347", "#4682B4", "#32CD32"))
"Carregando Pacotes"
{
setwd("c:/Users/pedro/Desktop/UFU/PROJETOS/INGLES")
library(readxl)
require(stringr)
require(dplyr)
library(stringdist)
require(tidyr)
}
"Preparando Dados"
{
MUSIC = data.frame(read_xlsx("REVISAO.xlsx",sheet = "MUSIC"))
TEXT = data.frame(read_xlsx("REVISAO.xlsx",sheet = "TEXT"))
BOOK = data.frame(read_xlsx("REVISAO.xlsx",sheet = "BOOK"))
dados = rbind(MUSIC,TEXT,BOOK)
dados = dados[dados$Tipo.Revisão == 'Palavra',]
dados = dados[!is.na(dados$Texto),]
dados$Tradução.Chat.GPT = paste0(dados$Tradução.Chat.GPT,';',dados$Tradução.Chat.GPT.2,';',dados$Significados.de.Contexto) #,';',dados$Significado
dados = dados[str_length(dados$Tradução.Chat.GPT) <= 50,]
dados = dados |> mutate_all( ~ifelse(is.na(.), "", .))
}
"App de Revisão"
{
palavras = c()
traducoes = c()
resposta = c()
tipo_resposta = c()
tempo_total = c()
traducoes2 = c()
tempo_total2 = c()
acertos = c()
MM = data.frame()
n <- as.integer(readline("Insira o número de revisões: "))
SUBSET = dados[row.names(dados) %in% sample(row.names(dados),n,replace = F),]
for(i in 1:n){
cat('\nRevisão número',i,'\n')
subset = SUBSET[i,]
cat('\nInforme a tradução de',paste0("'",subset$Texto,"'"),'\n')
tempo_inicio = Sys.time()
texto <- readline("Insira a tradução da palavra: ")
traducoes[i] = texto
tempo_fim = Sys.time()
tempo_total[i] <- as.numeric(difftime(tempo_fim, tempo_inicio, units = "secs"))
palavras[i] = subset$Texto
resposta[i] = subset$Tradução.Chat.GPT
texto <- readline("\nInsira o tipo para sua resposta: \n
1.certeza\n
2.não sei\n
3.chute\n
4.dúvida\n
5.vista recentemente\n")
tipo_resposta[i] = texto
RR = unique(str_replace_all(unlist((str_split(tolower(resposta[i]),',|;|-|\\.|/'))),' ',''))
TT = str_replace_all(unlist((str_split(tolower(traducoes[i]),',|;|-|\\.|/'))),' ','')
cond = sum(RR %in% TT)
M = data.frame(round((1-stringdistmatrix(RR,TT,method = 'jaccard'))*100,2))
TT = ifelse(TT == '','NULL',TT)
row.names(M) = (RR)
colnames(M) = TT
M$resposta = row.names(M)
M = as.data.frame(pivot_longer(M, cols = -resposta, names_to = "traducao", values_to = "jaccard"))
M$num = i
if(cond == 0){
cat('\nVocê errou, mais uma chance, dica:',subset$Exemplos.em.Frase,'\n')
tempo_inicio = Sys.time()
texto <- readline("Insira a tradução da palavra novamente: ")
traducoes2[i] = texto
tempo_fim = Sys.time()
tempo_total2[i] <- as.numeric(difftime(tempo_fim, tempo_inicio, units = "secs"))
acertos[i] = 1
RR = unique(str_replace_all(unlist((str_split(tolower(resposta[i]),',|;|-|\\.|/'))),' ',''))
TT = unique(str_replace_all(unlist((str_split(tolower(traducoes2[i]),',|;|-|\\.|/'))),' ',''))
cond = sum(RR %in% TT)
M = data.frame(round((1-stringdistmatrix(RR,TT,method = 'jaccard'))*100,2))
row.names(M) = as.vector(RR)
TT = ifelse(TT == '','NULL',TT)
colnames(M) = TT
M$resposta = row.names(M)
M = as.data.frame(pivot_longer(M, cols = -resposta, names_to = "traducao", values_to = "jaccard"))
M$num = i
if(cond == 0){
cat('\nVocê errou novamente, a traducão é',subset$Tradução.Chat.GPT,'\n')
} else{
cat('\nAgora você mandou bem, a traducão é',subset$Tradução.Chat.GPT,'\n')
}
} else {
cat('\nVocê acertou, a traducão é',subset$Tradução.Chat.GPT,'\n')
traducoes2[i] = ''
tempo_total2[i] <- 0
acertos[i] = 0
}
MM = rbind(MM,M)
}
}
MM
#no momento que for estudar pedir máximo de traduções possíveis para uma mesma palavras (implementar com dicionário posteriormente)
#melhorar sistema para ler palavras mais revisadas e  priorizar as que não foram e também as que foram erradas
#configurar sitema para mostra tradução da dica
#criar hábito de add nova planilha na revisao para as frases revisadas
#conseguir contornar questão de acertar bem proximo a palavra no momento de avaliar durante o app
"Carregando Pacotes"
{
setwd("c:/Users/pedro/Desktop/UFU/PROJETOS/INGLES")
library(readxl)
require(stringr)
require(dplyr)
library(stringdist)
require(tidyr)
}
"Preparando Dados"
{
MUSIC = data.frame(read_xlsx("REVISAO.xlsx",sheet = "MUSIC"))
TEXT = data.frame(read_xlsx("REVISAO.xlsx",sheet = "TEXT"))
BOOK = data.frame(read_xlsx("REVISAO.xlsx",sheet = "BOOK"))
dados = rbind(MUSIC,TEXT,BOOK)
dados = dados[dados$Tipo.Revisão == 'Palavra',]
dados = dados[!is.na(dados$Texto),]
dados$Tradução.Chat.GPT = paste0(dados$Tradução.Chat.GPT,';',dados$Tradução.Chat.GPT.2,';',dados$Significados.de.Contexto) #,';',dados$Significado
dados = dados[str_length(dados$Tradução.Chat.GPT) <= 50,]
dados = dados |> mutate_all( ~ifelse(is.na(.), "", .))
}
"App de Revisão"
{
palavras = c()
traducoes = c()
resposta = c()
tipo_resposta = c()
tempo_total = c()
traducoes2 = c()
tempo_total2 = c()
acertos = c()
MM = data.frame()
n <- as.integer(readline("Insira o número de revisões: "))
SUBSET = dados[row.names(dados) %in% sample(row.names(dados),n,replace = F),]
for(i in 1:n){
cat('\nRevisão número',i,'\n')
subset = SUBSET[i,]
cat('\nInforme a tradução de',paste0("'",subset$Texto,"'"),'\n')
tempo_inicio = Sys.time()
texto <- readline("Insira a tradução da palavra: ")
traducoes[i] = texto
tempo_fim = Sys.time()
tempo_total[i] <- as.numeric(difftime(tempo_fim, tempo_inicio, units = "secs"))
palavras[i] = subset$Texto
resposta[i] = subset$Tradução.Chat.GPT
texto <- readline("\nInsira o tipo para sua resposta: \n
1.certeza\n
2.não sei\n
3.chute\n
4.dúvida\n
5.vista recentemente\n")
tipo_resposta[i] = texto
RR = unique(str_replace_all(unlist((str_split(tolower(resposta[i]),',|;|-|\\.|/'))),' ',''))
TT = str_replace_all(unlist((str_split(tolower(traducoes[i]),',|;|-|\\.|/'))),' ','')
cond = sum(RR %in% TT)
M = data.frame(round((1-stringdistmatrix(RR,TT,method = 'jaccard'))*100,2))
TT = ifelse(TT == '','NULL',TT)
row.names(M) = (RR)
colnames(M) = TT
M$resposta = row.names(M)
M = as.data.frame(pivot_longer(M, cols = -resposta, names_to = "traducao", values_to = "jaccard"))
M$num = i
if(cond == 0){
cat('\nVocê errou, mais uma chance, dica:',subset$Exemplos.em.Frase,'\n')
tempo_inicio = Sys.time()
texto <- readline("Insira a tradução da palavra novamente: ")
traducoes2[i] = texto
tempo_fim = Sys.time()
tempo_total2[i] <- as.numeric(difftime(tempo_fim, tempo_inicio, units = "secs"))
acertos[i] = 1
RR = unique(str_replace_all(unlist((str_split(tolower(resposta[i]),',|;|-|\\.|/'))),' ',''))
TT = unique(str_replace_all(unlist((str_split(tolower(traducoes2[i]),',|;|-|\\.|/'))),' ',''))
cond = sum(RR %in% TT)
M = data.frame(round((1-stringdistmatrix(RR,TT,method = 'jaccard'))*100,2))
row.names(M) = as.vector(RR)
TT = ifelse(TT == '','NULL',TT)
colnames(M) = TT
M$resposta = row.names(M)
M = as.data.frame(pivot_longer(M, cols = -resposta, names_to = "traducao", values_to = "jaccard"))
M$num = i
if(cond == 0){
cat('\nVocê errou novamente, a traducão é',subset$Tradução.Chat.GPT,'\n')
} else{
cat('\nAgora você mandou bem, a traducão é',subset$Tradução.Chat.GPT,'\n')
}
} else {
cat('\nVocê acertou, a traducão é',subset$Tradução.Chat.GPT,'\n')
traducoes2[i] = ''
tempo_total2[i] <- 0
acertos[i] = 0
}
MM = rbind(MM,M)
}
}
{
data = rep(format(Sys.time(), "%Y-%m-%d %H:%M:%S"),length(palavras))
df = data.frame(palavras,traducoes,resposta,tipo_resposta,tempo_total,data,traducoes2,tempo_total2,acertos)
MM$data = format(Sys.time(), "%Y-%m-%d %H:%M:%S")
sum(df$tempo_total+df$tempo_total2)/60
write.table(df
, file = paste0("REVISOES","_",str_replace_all(format(Sys.time(), "%Y-%m-%d %H:%M:%S"),'-| |:',''),".csv"), sep = ";", na = "NA", quote = TRUE,dec=",", row.names = F,fileEncoding = "latin1")
write.table(MM
, file = paste0("SIMILARIDADES_PALAVRAS","_",str_replace_all(format(Sys.time(), "%Y-%m-%d %H:%M:%S"),'-| |:',''),".csv"), sep = ";", na = "NA", quote = TRUE,dec=",", row.names = F,fileEncoding = "latin1")
}
MM
df
table(df$tipo_resposta)
mean(df$acertos)
mean(df$tempo_total+df$tempo_total2)
sum(df$tempo_total+df$tempo_total2)/60
