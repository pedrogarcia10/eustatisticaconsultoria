ic <- boot.ci(bootstrap_results, type = "perc")
LI_ts_ld = ic$percent[4]
LS_ts_ld = ic$percent[5]
}
###NEW###
avl= rbind(avl,          data.frame(modelo = models_class[j],acc_tr_w_oddmin,
acc_tr_d_oddmin,
acc_tr_l_oddmin,
acc_tr_ld_oddmin,
acc_tr_wd_oddmin,
ROI_tr_d_oddmin,
ROI_tr_w_oddmin,
ROI_tr_l_oddmin,
ROI_tr_wd_oddmin,
ROI_tr_ld_oddmin,
ROI_ts_d_oddmin_otim,
ROI_ts_w_oddmin_otim,
ROI_ts_l_oddmin_otim,
ROI_ts_wd_oddmin_otim,
ROI_ts_ld_oddmin_otim,
acc_ts_d_oddmin_otim,
acc_ts_w_oddmin_otim,
acc_ts_l_oddmin_otim,
acc_ts_wd_oddmin_otim,
acc_ts_ld_oddmin_otim,
otim_tr_w_corte <- otim_tr_w[1, "corte"],
otim_tr_w_oddmin <- otim_tr_w[1, "oddmin"],
otim_tr_w_p <- otim_tr_w[1, "p"],
otim_tr_w_ep <- otim_tr_w[1, "ep"],
otim_tr_w_LI <- otim_tr_w[1, "LI"],
otim_tr_w_LS <- otim_tr_w[1, "LS"],
otim_tr_d_corte <- otim_tr_d[1, "corte"],
otim_tr_d_oddmin <- otim_tr_d[1, "oddmin"],
otim_tr_d_p <- otim_tr_d[1, "p"],
otim_tr_d_ep <- otim_tr_d[1, "ep"],
otim_tr_d_LI <- otim_tr_d[1, "LI"],
otim_tr_d_LS <- otim_tr_d[1, "LS"],
otim_tr_l_corte <- otim_tr_l[1, "corte"],
otim_tr_l_oddmin <- otim_tr_l[1, "oddmin"],
otim_tr_l_p <- otim_tr_l[1, "p"],
otim_tr_l_ep <- otim_tr_l[1, "ep"],
otim_tr_l_LI <- otim_tr_l[1, "LI"],
otim_tr_l_LS <- otim_tr_l[1, "LS"],
otim_tr_wd_corte <- otim_tr_wd[1, "corte"],
otim_tr_wd_oddmin <- otim_tr_wd[1, "oddmin"],
otim_tr_wd_p <- otim_tr_wd[1, "p"],
otim_tr_wd_ep <- otim_tr_wd[1, "ep"],
otim_tr_wd_LI <- otim_tr_wd[1, "LI"],
otim_tr_wd_LS <- otim_tr_wd[1, "LS"],
otim_tr_ld_corte <- otim_tr_ld[1, "corte"],
otim_tr_ld_oddmin <- otim_tr_ld[1, "oddmin"],
otim_tr_ld_p <- otim_tr_ld[1, "p"],
otim_tr_ld_ep <- otim_tr_ld[1, "ep"],
otim_tr_ld_LI <- otim_tr_ld[1, "LI"],
otim_tr_ld_LS <- otim_tr_ld[1, "LS"],
otim_tr_w_ROI = otim_tr_w[1,]$ganho,
otim_tr_d_ROI = otim_tr_d[1,]$ganho,
otim_tr_l_ROI = otim_tr_l[1,]$ganho,
otim_tr_wd_ROI = otim_tr_wd[1,]$ganho,
otim_tr_ld_ROI = otim_tr_ld[1,]$ganho,
LI_ts_ld = LI_ts_ld,
LI_ts_wd = LI_ts_wd,
LI_ts_d = LI_ts_d,
LI_ts_l = LI_ts_l,
LI_ts_w = LI_ts_w,
LS_ts_ld = LS_ts_ld,
LS_ts_wd = LS_ts_wd,
LS_ts_d = LS_ts_d,
LS_ts_l = LS_ts_l,
LS_ts_w = LS_ts_w))
}
avl
}
j
require(stringr)
avl$ligas = ligas[i]
avl$tipo = "class"
avl$metrica = rowSums(avl[,str_detect(colnames(avl),'ROI_ts')] %>% mutate_all(~ ifelse(. < 0, NA, .)),na.rm = T)
avl$rank = round(rank(1/avl$metrica),0)
avl = avl |> mutate(rank_roi_ts_w = rank(1/ROI_ts_w_oddmin_otim),
rank_roi_ts_wd = rank(1/ROI_ts_wd_oddmin_otim),
rank_roi_ts_d = rank(1/ROI_ts_d_oddmin_otim),
rank_roi_ts_l = rank(1/ROI_ts_l_oddmin_otim),
rank_roi_ts_ld = rank(1/ROI_ts_ld_oddmin_otim))
sel = avl |> select(rank_roi_ts_d,rank_roi_ts_l,rank_roi_ts_w,rank_roi_ts_wd,rank_roi_ts_ld)
avl = avl[rowSums(sel <= 2) > 0,]
#salvar todos que sejam top 2 por ts, >0
perff = rbind(perff,avl)
for(mdl in (1:nrow(avl))){
fit.RF = modellist[[avl[mdl,]$model]]
saveRDS(fit.RF,paste('./modelo',mdl,as.character(ligas[i]),'VIT','.rds'))
}
}
#REGRESSION
set.seed(10)
index = createDataPartition(y = data$dif_gols, times = 1, p = 1, list = FALSE)
treino = data[index,]
teste = data[-index,]
teste = teste2022
#models_reg = c('glmnet','gbm','ridge','knn','lasso','xgbLinear' ) #rpart, lm
#models_reg = c('glmnet','knn' ) #rpart, lm
lmProfile = readRDS(paste(as.character(unique(data$League)),'featsel_lmFuncs_reg_VIT.rds'))
head(arrange(data.frame(readRDS(paste(as.character(unique(data$League)),'featsel_lmFuncs_reg_VIT.rds'))$variables %>% group_by(var) %>% summarise(calc = mean(Overall))),desc(calc)),15)$var
if(length(lmProfile$optVariables) <= 4){
feat_sel_var_reg = append("dif_gols",head(arrange(data.frame(readRDS(paste(as.character(unique(data$League)),'featsel_lmFuncs_reg_VIT.rds'))$variables %>% group_by(var) %>% summarise(calc = mean(Overall))),desc(calc)),5)$var
)
} else {
feat_sel_var_reg = append("dif_gols",readRDS(paste(as.character(unique(data$League)),'featsel_lmFuncs_reg_VIT.rds'))$optVariables)
}
vars = readRDS(paste(as.character(unique(data$League)),'featsel_lmFuncs_reg_VIT.rds'))$variables %>% group_by(var) %>% summarise(calc = mean(Overall)) |> arrange(-calc) |> select(var) |> pull()
feat_sel_var_reg = append('dif_gols',vars[1:which(lmProfile$results$Rsquared > max(lmProfile$results$Rsquared)-0.01)[1]])
modellist = list()
sel_var = feat_sel_var_reg
sel_var = as.vector(na.omit(sel_var))
sel_var
avl2 = data.frame()
for(l in 1:length(models_reg)){
#l =1
set.seed(10)
fit.RF_2 = train(dif_gols~.,treino[,sel_var],trControl = trainControl, method = models_reg[l],metric = "MAE",preProc = c('center','scale'))
saveRDS(fit.RF_2,paste('./modelo_difgols',as.character(ligas[i]),models_reg[l],'VIT','.rds')) #pensar em o que coletar
key = models_reg[l]
modellist[[key]] = fit.RF_2
if(length(table((ifelse(predict(modellist[[l]],treino) >= 0,'W','LD'))))==2){
cmtr = confusionMatrix(table(ifelse(predict(modellist[[l]],treino) >= 0,'W','LD'),ifelse(treino$FT_Goals_H>treino$FT_Goals_A,'W','LD')),positive = 'W')
} else {
cmtr = confusionMatrix(table(ifelse(predict(modellist[[l]],treino) >= 0.2,'W','LD'),ifelse(treino$FT_Goals_H>treino$FT_Goals_A,'W','LD')),positive = 'LD')
}
MAE = arrange(fit.RF_2$results,MAE)$MAE[1]
# APOSTAS W
{
cmtr = confusionMatrix(table(ifelse(predict(modellist[[l]],treino) >= 0,'W','LD'),ifelse(treino$FT_Goals_H>treino$FT_Goals_A,'W','LD')),positive = 'W')
calc = treino
calc$result = ifelse(predict(fit.RF_2,treino)>=0,'W','LD')
calc$probw = predict(fit.RF_2,treino)
stake = 1
sel = calc[calc$result == 'W' & calc$FT_Odds_H >  1/cmtr$overall[1],]
acc_tr_w_oddmin = mean('W' == ifelse(sel$FT_Goals_H>sel$FT_Goals_A,'W','LD'))
ROI_tr_w_oddmin = sum(ifelse('W' == ifelse(sel$FT_Goals_H>sel$FT_Goals_A,'W','LD'),stake*(sel$FT_Odds_H-1),-stake)/(nrow(sel)*stake))*100
acc_tr_w_oddmin;ROI_tr_w_oddmin;
oddmin = c(); p_w = c(); ep_w = c(); LI_w = c(); LS_w = c();
ganho = c(); bets = c(); cortes = seq(-2,1,0.1)
for(ii in 1:length(cortes)){
cmtr = table(ifelse(predict(modellist[[l]],treino) >= cortes[ii],'W','LD'),ifelse(treino$FT_Goals_H>treino$FT_Goals_A,'W','LD'))
###NEW###
categories <- c('W', 'LD')
full_cmtr <- matrix(0, nrow = length(categories), ncol = length(categories), dimnames = list(categories, categories))
full_cmtr[rownames(cmtr), colnames(cmtr)] <- cmtr
full_cmtr <- as.table(full_cmtr)
cmtr = full_cmtr
###NEW###
n = sum(cmtr[c('W'),])
p_w[ii] = sum(cmtr[c('W'),c('W')])/n
ep_w[ii] = abs(qnorm(0.025)*sqrt((p_w[ii]*(1-p_w[ii]))/n))
oddmin[ii] = 1/(p_w[ii]-ep_w[ii])
sel = calc[calc$probw >= cortes[ii] & calc$FT_Odds_H > oddmin[ii],]
rois = ((ifelse('W' == ifelse(sel$FT_Goals_H>sel$FT_Goals_A,'W','LD'),stake*(sel$FT_Odds_H-1),-stake))/(1*stake))*100
if(max(rois) == min(rois)){
rois = append(rois,max(rois)+0.01)
} else{
}
###NEW###
if(length(rois) <= 3){
LI_w[ii] = NA
LS_w[ii] = NA
} else{
bootstrap_results <- boot(data = rois, statistic = mean_fun, R = 1000)
ic <- boot.ci(bootstrap_results, type = "perc")
LI_w[ii] = ic$percent[4]
LS_w[ii] = ic$percent[5]
}
###NEW###
ganho[ii] = (sum(ifelse('W' == ifelse(sel$FT_Goals_H>sel$FT_Goals_A,'W','LD'),stake*(sel$FT_Odds_H-1),-stake))/(nrow(sel)*stake))*100
bets[ii] = (nrow(sel)/nrow(calc))*100
}
otim_tr_w = arrange(data.frame(corte = cortes, ganho = ganho, bets = bets,metrica = ganho*bets,oddmin = oddmin,p = p_w,ep = ep_w,LI = LI_w, LS = LS_w),desc(metrica))
calc = teste
calc$result = ifelse(predict(fit.RF_2,teste)>=0,'W','LD')
calc$probw = predict(fit.RF_2,teste)
stake = 1
sel = calc[calc$probw > otim_tr_w[1,]$corte & calc$FT_Odds_H >   otim_tr_w[1,]$corte,]
acc_ts_w_oddmin_otim = mean('W' == ifelse(sel$FT_Goals_H>sel$FT_Goals_A,'W','LD'))
ROI_ts_w_oddmin_otim = sum(ifelse('W' == ifelse(sel$FT_Goals_H>sel$FT_Goals_A,'W','LD'),stake*(sel$FT_Odds_H-1),-stake)/(nrow(sel)*stake))*100
}
###NEW###
rois = (ifelse('W' == ifelse(sel$FT_Goals_H>sel$FT_Goals_A,'W','LD'),stake*(sel$FT_Odds_H-1),-stake)/(nrow(sel)*stake))*100
if(max(rois) == min(rois)){
rois = append(rois,max(rois)+0.01)
} else{
}
if(length(rois) <= 3){
LI_ts_w = NA
LS_ts_w = NA
} else{
bootstrap_results <- boot(data = rois, statistic = mean_fun, R = 1000)
ic <- boot.ci(bootstrap_results, type = "perc")
LI_ts_w = ic$percent[4]
LS_ts_w = ic$percent[5]
}
###NEW###
# APOSTAS L
{
cmtr = confusionMatrix(table(ifelse(predict(modellist[[l]],treino) <= 0,'L','WD'),ifelse(treino$FT_Goals_H<treino$FT_Goals_A,'L','WD')),positive = 'L')
calc = treino
calc$result = ifelse(predict(fit.RF_2,treino)<=0,'L','WD')
calc$probl = predict(fit.RF_2,treino)
stake = 1
sel = calc[calc$result == 'L' & calc$FT_Odds_A >  1/cmtr$overall[1],]
acc_tr_l_oddmin = mean('L' == ifelse(sel$FT_Goals_H<sel$FT_Goals_A,'L','WD'))
ROI_tr_l_oddmin = sum(ifelse('L' == ifelse(sel$FT_Goals_H<sel$FT_Goals_A,'L','WD'),stake*(sel$FT_Odds_A-1),-stake)/(nrow(sel)*stake))*100
acc_tr_l_oddmin;ROI_tr_l_oddmin;
oddmin = c(); p_w = c(); ep_w = c(); LI_w = c(); LS_w = c();
ganho = c(); bets = c(); cortes = seq(-2,1,0.1)
for(ii in 1:length(cortes)){
cmtr = (table(ifelse(predict(modellist[[l]],treino) <= 0,'L','WD'),ifelse(treino$FT_Goals_H<treino$FT_Goals_A,'L','WD')))
###NEW###
categories <- c('L', 'WD')
full_cmtr <- matrix(0, nrow = length(categories), ncol = length(categories), dimnames = list(categories, categories))
full_cmtr[rownames(cmtr), colnames(cmtr)] <- cmtr
full_cmtr <- as.table(full_cmtr)
cmtr = full_cmtr
###NEW###
n = sum(cmtr[c('L'),])
p_w[ii] = sum(cmtr[c('L'),c('L')])/n
ep_w[ii] = abs(qnorm(0.025)*sqrt((p_w[ii]*(1-p_w[ii]))/n))
oddmin[ii] = 1/(p_w[ii]-ep_w[ii])
sel = calc[calc$probl <= cortes[ii] & calc$FT_Odds_A >  oddmin[ii],]
rois = ((ifelse('L' == ifelse(sel$FT_Goals_H<sel$FT_Goals_A,'L','WD'),stake*(sel$FT_Odds_A-1),-stake))/(1*stake))*100
if(max(rois) == min(rois)){
rois = append(rois,max(rois)+0.01)
} else{
}
###NEW###
if(length(rois) <= 3){
LI_w[ii] = NA
LS_w[ii] = NA
} else{
bootstrap_results <- boot(data = rois, statistic = mean_fun, R = 1000)
ic <- boot.ci(bootstrap_results, type = "perc")
LI_w[ii] = ic$percent[4]
LS_w[ii] = ic$percent[5]
}
###NEW###
ganho[ii] = (sum(ifelse('L' == ifelse(sel$FT_Goals_H<sel$FT_Goals_A,'L','WD'),stake*(sel$FT_Odds_A-1),-stake))/(nrow(sel)*stake))*100
bets[ii] = (nrow(sel)/nrow(calc))*100
}
otim_tr_l = arrange(data.frame(corte = cortes, ganho = ganho, bets = bets,metrica = ganho*bets,oddmin = oddmin,p = p_w,ep = ep_w,LI = LI_w, LS = LS_w),desc(metrica))
otim_tr_l
calc = teste
calc$result = ifelse(predict(fit.RF_2,teste)<=0,'L','WD')
calc$probl = predict(fit.RF_2,teste)
stake = 1
sel = calc[calc$probl < otim_tr_l[1,]$corte & calc$FT_Odds_A >  otim_tr_l[1,]$oddmin,]
acc_ts_l_oddmin_otim = mean('L' == ifelse(sel$FT_Goals_H<sel$FT_Goals_A,'L','WD'))
ROI_ts_l_oddmin_otim = sum(ifelse('L' == ifelse(sel$FT_Goals_H<sel$FT_Goals_A,'L','WD'),stake*(sel$FT_Odds_A-1),-stake)/(nrow(sel)*stake))*100
###NEW###
rois = (ifelse('L' == ifelse(sel$FT_Goals_H<sel$FT_Goals_A,'L','WD'),stake*(sel$FT_Odds_A-1),-stake)/(nrow(sel)*stake))*100
if(max(rois) == min(rois)){
rois = append(rois,max(rois)+0.01)
} else{
}
if(length(rois) <= 3){
LI_ts_l = NA
LS_ts_l = NA
} else{
bootstrap_results <- boot(data = rois, statistic = mean_fun, R = 1000)
ic <- boot.ci(bootstrap_results, type = "perc")
LI_ts_l = ic$percent[4]
LS_ts_l = ic$percent[5]
}
###NEW###
}
# APOSTAS D
"Pra implementar seria um pouco mais complicado,uma vez que teria que ser aplicada um intervalo"
# APOSTAS WD
{
cmtr = confusionMatrix(table(ifelse(predict(modellist[[l]],treino) >= 0,'WD','L'),ifelse(treino$FT_Goals_H>=treino$FT_Goals_A,'WD','L')),positive = 'WD')
calc = treino
calc$result = ifelse(predict(fit.RF_2,treino)>=0,'WD','L')
calc$probwd = predict(fit.RF_2,treino)
stake = 1
sel = calc[calc$result == 'WD' & calc$Odds_DuplaChance_1X >  1/cmtr$overall[1],]
acc_tr_w_oddmin = mean('WD' == ifelse(sel$FT_Goals_H>=sel$FT_Goals_A,'WD','L'))
ROI_tr_w_oddmin = sum(ifelse('WD' == ifelse(sel$FT_Goals_H>=sel$FT_Goals_A,'WD','L'),stake*(sel$Odds_DuplaChance_1X-1),-stake)/(nrow(sel)*stake))*100
acc_tr_w_oddmin;ROI_tr_w_oddmin;
oddmin = c(); p_w = c(); ep_w = c(); LI_w = c(); LS_w = c();
ganho = c(); bets = c(); cortes = seq(-2,1,0.1)
for(ii in 1:length(cortes)){
cmtr = (table(ifelse(predict(modellist[[l]],treino) >= cortes[ii],'WD','L'),ifelse(treino$FT_Goals_H>=treino$FT_Goals_A,'WD','L')))
###NEW###
categories <- c('WD', 'L')
full_cmtr <- matrix(0, nrow = length(categories), ncol = length(categories), dimnames = list(categories, categories))
full_cmtr[rownames(cmtr), colnames(cmtr)] <- cmtr
full_cmtr <- as.table(full_cmtr)
cmtr = full_cmtr
###NEW###
n = sum(cmtr[c('WD'),])
p_w[ii] = sum(cmtr[c('WD'),c('WD')])/n
ep_w[ii] = abs(qnorm(0.025)*sqrt((p_w[ii]*(1-p_w[ii]))/n))
oddmin[ii] = 1/(p_w[ii]-ep_w[ii])
sel = calc[calc$probwd >= cortes[ii] & calc$Odds_DuplaChance_1X >  oddmin[ii],]
rois = ((ifelse('WD' == ifelse(sel$FT_Goals_H>=sel$FT_Goals_A,'WD','L'),stake*(sel$Odds_DuplaChance_1X-1),-stake))/(1*stake))*100
if(max(rois) == min(rois)){
rois = append(rois,max(rois)+0.01)
} else{
}
###NEW###
if(length(rois) <= 3){
LI_w[ii] = NA
LS_w[ii] = NA
} else{
bootstrap_results <- boot(data = rois, statistic = mean_fun, R = 1000)
ic <- boot.ci(bootstrap_results, type = "perc")
LI_w[ii] = ic$percent[4]
LS_w[ii] = ic$percent[5]
}
###NEW###
ganho[ii] = (sum(ifelse('WD' == ifelse(sel$FT_Goals_H>=sel$FT_Goals_A,'WD','L'),stake*(sel$Odds_DuplaChance_1X-1),-stake))/(nrow(sel)*stake))*100
bets[ii] = (nrow(sel)/nrow(calc))*100
}
otim_tr_wd = arrange(data.frame(corte = cortes, ganho = ganho, bets = bets,metrica = ganho*bets,oddmin = oddmin,p = p_w,ep = ep_w,LI = LI_w, LS = LS_w),desc(metrica))
calc = teste
calc$result = ifelse(predict(fit.RF_2,teste)>=0,'WD','L')
calc$probwd = predict(fit.RF_2,teste)
stake = 1
sel = calc[calc$probwd > otim_tr_wd[1,]$corte & calc$Odds_DuplaChance_1X >  otim_tr_wd[1,]$oddmin ,]
acc_ts_wd_oddmin_otim = mean('WD' == ifelse(sel$FT_Goals_H>=sel$FT_Goals_A,'WD','L'))
ROI_ts_wd_oddmin_otim = sum(ifelse('WD' == ifelse(sel$FT_Goals_H>=sel$FT_Goals_A,'WD','L'),stake*(sel$Odds_DuplaChance_1X-1),-stake)/(nrow(sel)*stake))*100
###NEW###
rois = (ifelse('WD' == ifelse(sel$FT_Goals_H>=sel$FT_Goals_A,'WD','L'),stake*(sel$Odds_DuplaChance_1X-1),-stake)/(nrow(sel)*stake))*100
if(max(rois) == min(rois)){
rois = append(rois,max(rois)+0.01)
} else{
}
if(length(rois) <= 3){
LI_ts_wd = NA
LS_ts_wd = NA
} else{
bootstrap_results <- boot(data = rois, statistic = mean_fun, R = 1000)
ic <- boot.ci(bootstrap_results, type = "perc")
LI_ts_wd = ic$percent[4]
LS_ts_wd = ic$percent[5]
}
###NEW###
}
# APOSTAS LD
{
cmtr = confusionMatrix(table(ifelse(predict(modellist[[l]],treino) <= 0,'LD','W'),ifelse(treino$FT_Goals_H<=treino$FT_Goals_A,'LD','W')),positive = 'LD')
cmtr
calc = treino
calc$result = ifelse(predict(fit.RF_2,treino)<=0,'LD','W')
calc$probld = predict(fit.RF_2,treino)
stake = 1
sel = calc[calc$result == 'LD' & calc$Odds_DuplaChance_X2 >  1/cmtr$overall[1],]
acc_tr_ld_oddmin = mean('LD' == ifelse(sel$FT_Goals_H<=sel$FT_Goals_A,'LD','W'))
ROI_tr_ld_oddmin = sum(ifelse('LD' == ifelse(sel$FT_Goals_H<=sel$FT_Goals_A,'LD','W'),stake*(sel$Odds_DuplaChance_X2-1),-stake)/(nrow(sel)*stake))*100
acc_tr_ld_oddmin;ROI_tr_ld_oddmin;
oddmin = c(); p_w = c(); ep_w = c(); LI_w = c(); LS_w = c();
ganho = c(); bets = c(); cortes = seq(-2,1,0.1)
for(ii in 1:length(cortes)){
cmtr = (table(ifelse(predict(modellist[[l]],treino) <= cortes[ii],'LD','W'),ifelse(treino$FT_Goals_H<=treino$FT_Goals_A,'LD','W')))
###NEW###
categories <- c('LD', 'W')
full_cmtr <- matrix(0, nrow = length(categories), ncol = length(categories), dimnames = list(categories, categories))
full_cmtr[rownames(cmtr), colnames(cmtr)] <- cmtr
full_cmtr <- as.table(full_cmtr)
cmtr = full_cmtr
###NEW###
n = sum(cmtr[c('LD'),])
p_w[ii] = sum(cmtr[c('LD'),c('LD')])/n
ep_w[ii] = abs(qnorm(0.025)*sqrt((p_w[ii]*(1-p_w[ii]))/n))
oddmin[ii] = 1/(p_w[ii]-ep_w[ii])
sel = calc[calc$probld <= cortes[ii] & calc$Odds_DuplaChance_X2 >  oddmin[ii],]
rois = ((ifelse('LD' == ifelse(sel$FT_Goals_H<=sel$FT_Goals_A,'LD','W'),stake*(sel$Odds_DuplaChance_X2-1),-stake))/(1*stake))*100
if(max(rois) == min(rois)){
rois = append(rois,max(rois)+0.01)
} else{
}
###NEW###
if(length(rois) <= 3){
LI_w[ii] = NA
LS_w[ii] = NA
} else{
bootstrap_results <- boot(data = rois, statistic = mean_fun, R = 1000)
ic <- boot.ci(bootstrap_results, type = "perc")
LI_w[ii] = ic$percent[4]
LS_w[ii] = ic$percent[5]
}
###NEW###
ganho[ii] = (sum(ifelse('LD' == ifelse(sel$FT_Goals_H<=sel$FT_Goals_A,'LD','W'),stake*(sel$Odds_DuplaChance_X2-1),-stake))/(nrow(sel)*stake))*100
bets[ii] = (nrow(sel)/nrow(calc))*100
}
otim_tr_ld =  arrange(data.frame(corte = cortes, ganho = ganho, bets = bets,metrica = ganho*bets,oddmin = oddmin,p = p_w,ep = ep_w,LI = LI_w, LS = LS_w),desc(metrica))
otim_tr_ld
calc = teste
calc$result = ifelse(predict(fit.RF_2,teste)<=0,'LD','W')
calc$probld = predict(fit.RF_2,teste)
stake = 1
sel = calc[calc$probld < otim_tr_ld[1,]$corte & calc$Odds_DuplaChance_X2 >  otim_tr_ld[1,]$oddmin,]
acc_ts_ld_oddmin_otim = mean('LD' == ifelse(sel$FT_Goals_H<=sel$FT_Goals_A,'LD','W'))
ROI_ts_ld_oddmin_otim = sum(ifelse('LD' == ifelse(sel$FT_Goals_H<=sel$FT_Goals_A,'LD','W'),stake*(sel$Odds_DuplaChance_X2-1),-stake)/(nrow(sel)*stake))*100
###NEW###
rois = (ifelse('LD' == ifelse(sel$FT_Goals_H<=sel$FT_Goals_A,'LD','W'),stake*(sel$Odds_DuplaChance_X2-1),-stake)/(nrow(sel)*stake))*100
if(max(rois) == min(rois)){
rois = append(rois,max(rois)+0.01)
} else{
}
if(length(rois) <= 3){
LI_ts_ld = NA
LS_ts_ld = NA
} else{
bootstrap_results <- boot(data = rois, statistic = mean_fun, R = 1000)
ic <- boot.ci(bootstrap_results, type = "perc")
LI_ts_ld = ic$percent[4]
LS_ts_ld = ic$percent[5]
}
###NEW###
}
avl2= rbind(avl2,           data.frame(modelo = models_reg[l],acc_tr_w_oddmin,
acc_tr_l_oddmin,
acc_tr_ld_oddmin,
acc_tr_wd_oddmin,
ROI_tr_w_oddmin,
ROI_tr_l_oddmin,
ROI_tr_wd_oddmin,
ROI_tr_ld_oddmin,
ROI_ts_w_oddmin_otim,
ROI_ts_l_oddmin_otim,
ROI_ts_wd_oddmin_otim,
ROI_ts_ld_oddmin_otim,
acc_ts_w_oddmin_otim,
acc_ts_l_oddmin_otim,
acc_ts_wd_oddmin_otim,
acc_ts_ld_oddmin_otim,
otim_tr_w_corte <- otim_tr_w[1, "corte"],
otim_tr_w_oddmin <- otim_tr_w[1, "oddmin"],
otim_tr_w_p <- otim_tr_w[1, "p"],
otim_tr_w_ep <- otim_tr_w[1, "ep"],
otim_tr_w_LI <- otim_tr_w[1, "LI"],
otim_tr_w_LS <- otim_tr_w[1, "LS"],
otim_tr_l_corte <- otim_tr_l[1, "corte"],
otim_tr_l_oddmin <- otim_tr_l[1, "oddmin"],
otim_tr_l_p <- otim_tr_l[1, "p"],
otim_tr_l_ep <- otim_tr_l[1, "ep"],
otim_tr_l_LI <- otim_tr_l[1, "LI"],
otim_tr_l_LS <- otim_tr_l[1, "LS"],
otim_tr_wd_corte <- otim_tr_wd[1, "corte"],
otim_tr_wd_oddmin <- otim_tr_wd[1, "oddmin"],
otim_tr_wd_p <- otim_tr_wd[1, "p"],
otim_tr_wd_ep <- otim_tr_wd[1, "ep"],
otim_tr_wd_LI <- otim_tr_wd[1, "LI"],
otim_tr_wd_LS <- otim_tr_wd[1, "LS"],
otim_tr_ld_corte <- otim_tr_ld[1, "corte"],
otim_tr_ld_oddmin <- otim_tr_ld[1, "oddmin"],
otim_tr_ld_p <- otim_tr_ld[1, "p"],
otim_tr_ld_ep <- otim_tr_ld[1, "ep"],
otim_tr_ld_LI <- otim_tr_ld[1, "LI"],
otim_tr_ld_LS <- otim_tr_ld[1, "LS"],
otim_tr_w_ROI = otim_tr_w[1,]$ganho,
otim_tr_l_ROI = otim_tr_l[1,]$ganho,
otim_tr_wd_ROI = otim_tr_wd[1,]$ganho,
otim_tr_ld_ROI = otim_tr_ld[1,]$ganho,
LI_ts_ld = LI_ts_ld,
LI_ts_wd = LI_ts_wd,
LI_ts_d = LI_ts_d,
LI_ts_l = LI_ts_l,
LI_ts_w = LI_ts_w,
LS_ts_ld = LS_ts_ld,
LS_ts_wd = LS_ts_wd,
LS_ts_d = LS_ts_d,
LS_ts_l = LS_ts_l,
LS_ts_w = LS_ts_w))
}
avl2
avl2$ligas = ligas[i]
avl2$tipo = "reg"
avl2$metrica = rowSums(avl2[,str_detect(colnames(avl2),'ROI_ts')] %>% mutate_all(~ ifelse(. < 0, NA, .)),na.rm = T)
avl2$rank = round(rank(1/avl2$metrica),0)
avl2 = avl2 |> mutate(rank_roi_ts_w = rank(1/ROI_ts_w_oddmin_otim),
rank_roi_ts_wd = rank(1/ROI_ts_wd_oddmin_otim),
rank_roi_ts_d = rank(1/ROI_ts_d_oddmin_otim),
rank_roi_ts_l = rank(1/ROI_ts_l_oddmin_otim),
rank_roi_ts_ld = rank(1/ROI_ts_ld_oddmin_otim))
sel = avl2 |> select(rank_roi_ts_d,rank_roi_ts_l,rank_roi_ts_w,rank_roi_ts_wd,rank_roi_ts_ld)
avl2 = avl2[rowSums(sel <= 2) > 0,]
"        avl2$acc_tr_d_oddmin = NA
avl2$ROI_tr_d_oddmin = NA
avl2$ROI_ts_d_oddmin_otim = NA
avl2$acc_ts_d_oddmin_otim = NA
avl2$otim_tr_d_ROI = NA
avl2$otim_tr_d_corte <- NA
avl2$otim_tr_d_oddmin <- NA
avl2$otim_tr_d_p <- NA
avl2$otim_tr_d_ep <- NA
avl2$otim_tr_d_LI <- NA
avl2$otim_tr_d_LS <- NA"
'PAREI AQUI!!!!!!! , DAR UM JEITO DE SELECIONAR OS MELHORES MODELOS SALVANDO E JUNTAR OS DATASETS'
setdiff(colnames(perff),colnames(arrange(avl2,desc(ROI_ts_w_oddmin_otim))[1,]))
perff = bind_rows(perff,avl2)
for(mdl in (1:nrow(avl2))){
fit.RF = modellist[[avl2[mdl,]$model]]
saveRDS(fit.RF,paste('./modelo_difgols',mdl,as.character(ligas[i]),'VIT','.rds'))
}
} else {
}
}
}
#PENSAR EM SOLUÇÃO PRA ISSO MAS COM MULTIPLOS MODELOS É FODA
#perff = merge(perff[1,],perff[2,],by = 'ligas',all = TRUE)
write.table(perff, file = paste(as.character(unique(savedata$League)),"perf_anl_VIT.csv"), sep = ";", na = "NA", quote = TRUE,dec=",", row.names = FALSE,fileEncoding = "latin1")
perf = read.csv(paste(as.character(unique(savedata$League)),"perf_anl_VIT.csv"),sep=";",fileEncoding = "latin1",dec=",")
}
